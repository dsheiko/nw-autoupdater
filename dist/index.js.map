{"version":3,"sources":["../index.js"],"names":["EventEmitter","require","AppSwapStrategy","ScriptSwapStrategy","semver","os","join","basename","dirname","unpackTarGz","unpackZip","debounce","readJson","download","launch","rtrim","remove","PLATFORM_FULL","swapFactory","getExecutable","UPDATE_DIR","EXEC_DIR","BACKUP_DIR","LOG_PATH","ERR_INVALID_REMOTE_MANIFEST","DEBOUNCE_TIME","DEFAULT_OPTIONS","executable","backupDir","execDir","updateDir","logPath","verbose","swapScript","strategy","accumulativeBackup","AutoUpdater","constructor","manifest","options","manifestUrl","Error","release","argv","nw","App","remoteManifest","Object","assign","Math","floor","Date","now","name","readRemoteManifest","e","checkNewVersion","packages","TypeError","gt","version","debounceTime","onProgress","length","emit","size","url","tmpdir","unpack","updateFile","isZipRe","isGzRe","installFiles","totalFiles","test","message","isSwapRequest","swap","restart","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const EventEmitter = require( \"events\" ),\r\n      AppSwapStrategy = require( \"./Lib/Strategy/AppSwap\" ),\r\n      ScriptSwapStrategy = require( \"./Lib/Strategy/ScriptSwap\" ),\r\n      semver = require( \"semver\" ),\r\n      os = require( \"os\" ),\r\n      { join, basename, dirname } = require( \"path\" ),\r\n      unpackTarGz = require( \"./Lib/unpackTarGz\" ),\r\n      unpackZip = require( \"./Lib/unpackZip\" ),\r\n      debounce = require( \"debounce\" ),\r\n\r\n      { readJson, download }  = require( \"./Lib/request\" ),\r\n      { launch, rtrim, remove } = require( \"./Lib/utils\" ),\r\n      { PLATFORM_FULL, swapFactory,\r\n        getExecutable, UPDATE_DIR, EXEC_DIR, BACKUP_DIR, LOG_PATH } = require( \"./Lib/env\" ),\r\n\r\n      ERR_INVALID_REMOTE_MANIFEST = \"Invalid manifest structure\",\r\n      DEBOUNCE_TIME = 100,\r\n\r\n      DEFAULT_OPTIONS = {\r\n        executable: null,\r\n        backupDir: BACKUP_DIR,\r\n        execDir: EXEC_DIR,\r\n        updateDir: UPDATE_DIR,\r\n        logPath: LOG_PATH,\r\n        verbose: false,\r\n        swapScript: null,\r\n        strategy: \"AppSwap\",\r\n        accumulativeBackup: false\r\n      };\r\n\r\n\r\nclass AutoUpdater extends EventEmitter {\r\n  /**\r\n   * Create AutoUpdate\r\n   * @param {Object} manifest\r\n   * @param {Object} options\r\n   */\r\n  constructor( manifest, options = {}){\r\n\r\n    super();\r\n\r\n    this.manifest = manifest;\r\n    if ( !this.manifest.manifestUrl ) {\r\n      throw new Error( `Manifest must contain manifestUrl field` );\r\n    }\r\n\r\n    this.release = \"\";\r\n    this.argv = nw.App.argv;\r\n    this.remoteManifest = \"\";\r\n    this.options = Object.assign( {}, DEFAULT_OPTIONS, options );\r\n    this.options.backupDir += this.options.accumulativeBackup ? `_${Math.floor(Date.now() / 1000)}` : ``;\r\n    this.options.execDir = rtrim( this.options.execDir );\r\n    this.options.executable = this.options.executable || getExecutable( manifest.name );\r\n    // Mixing up a chosen strategy\r\n    Object.assign( this, this.options.strategy === \"ScriptSwap\" ? ScriptSwapStrategy : AppSwapStrategy );\r\n\r\n  }\r\n  /**\r\n   * Read package.json from the release server\r\n   * @returns {Promise<JSON>}\r\n   */\r\n  async readRemoteManifest(){\r\n    try {\r\n      return await readJson( this.manifest.manifestUrl );\r\n    } catch ( e ) {\r\n      throw new Error( `Cannot read remote manifest from ${this.manifest.manifestUrl}` );\r\n    }\r\n  }\r\n  /**\r\n   * Check if a new app version available\r\n   * @param {Object} remoteManifest\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  async checkNewVersion( remoteManifest ){\r\n    if ( !remoteManifest || !remoteManifest.packages ){\r\n      throw new TypeError( ERR_INVALID_REMOTE_MANIFEST );\r\n    }\r\n    return semver.gt( remoteManifest.version, this.manifest.version );\r\n  }\r\n  /**\r\n   * Download new version\r\n   * @param {Object} remoteManifest\r\n   * @param {Object} options\r\n   * @returns {Promise<string>}\r\n   */\r\n  async download( remoteManifest, { debounceTime } = { debounceTime: DEBOUNCE_TIME }){\r\n    if ( !remoteManifest || !remoteManifest.packages ){\r\n      throw new TypeError( ERR_INVALID_REMOTE_MANIFEST );\r\n    }\r\n    const release = remoteManifest.packages[ PLATFORM_FULL ];\r\n    if ( !release ) {\r\n      throw new Error( `No release matches the platfrom ${PLATFORM_FULL}` );\r\n    }\r\n    const onProgress = ( length ) => {\r\n      this.emit( \"download\", length, release.size );\r\n    };\r\n    try {\r\n      remove( this.options.updateDir );\r\n      return await download( release.url, os.tmpdir(), debounce( onProgress, debounceTime ));\r\n    } catch ( e ) {\r\n      throw new Error( `Cannot download package from ${release.url}` );\r\n    }\r\n  }\r\n  /**\r\n   * Unpack downloaded version\r\n   * @param {string} updateFile\r\n   * @param {Object} options\r\n   * @returns {Promise<string>}\r\n   */\r\n  async unpack( updateFile, { debounceTime } = { debounceTime: DEBOUNCE_TIME } ){\r\n    const isZipRe = /\\.zip$/i,\r\n          isGzRe = /\\.tar\\.gz$/i,\r\n          onProgress = ( installFiles, totalFiles ) => {\r\n            this.emit( \"install\", installFiles, totalFiles );\r\n          },\r\n          updateDir = this.options.updateDir;\r\n\r\n    if ( !updateFile ){\r\n      throw new Error( \"You have to call first download method\" );\r\n    }\r\n\r\n    switch( true ) {\r\n      case isGzRe.test( updateFile ):\r\n         try {\r\n          await unpackTarGz( updateFile, updateDir, debounce( onProgress, debounceTime ) );\r\n         } catch ( e ) {\r\n            throw new Error( `Cannot unpack .tar.gz package ${updateFile}` );\r\n         }\r\n         break;\r\n      case isZipRe.test( updateFile ):\r\n         try {\r\n          await unpackZip( updateFile, updateDir, debounce( onProgress, debounceTime ) );\r\n         } catch ( e ) {\r\n            throw new Error( `Cannot unpack .zip package ${updateFile}: ${e.message}` );\r\n         }\r\n         break;\r\n      default:\r\n         throw new Error( \"Release arhive of unsuported type\" );\r\n         break;\r\n    }\r\n    return updateDir;\r\n  }\r\n\r\n  /**\r\n   * @deprecated since v.1.1.0\r\n   * @returns {Boolean}\r\n   */\r\n  isSwapRequest(){\r\n    return false;\r\n  }\r\n  /**\r\n   * @deprecated since v.1.1.0\r\n   * @returns {Boolean}\r\n   */\r\n  async swap(){\r\n    return false;\r\n  }\r\n  /**\r\n   * @deprecated since v.1.1.0\r\n   * @returns {Boolean}\r\n   */\r\n  async restart(){\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = AutoUpdater;\r\n"]}