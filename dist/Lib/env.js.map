{"version":3,"sources":["../../Lib/env.js"],"names":["os","require","join","dirname","SwapWin","SwapLinux","SwapMac","IS_OSX","test","process","platform","IS_WIN","EXEC_DIR","execPath","match","PKG_NAME","LOG_FILE","UPDATE_DIR","tmpdir","BACKUP_DIR","LOG_PATH","nw","App","dataPath","getExecutable","name","PLATFORM_SHORT","PLATFORM_FULL","arch","swapFactory","options","Swap","exports"],"mappings":"AAAA,MAAMA,KAAKC,QAAS,IAAT,CAAX;AACA,MAAM,EAAEC,IAAF,EAAQC,OAAR,KAAoBF,QAAS,MAAT,CAA1B;;AAEA,MAAMG,UAAUH,QAAS,YAAT,CAAhB;AACA,MAAMI,YAAYJ,QAAS,cAAT,CAAlB;AACA,MAAMK,UAAUL,QAAS,YAAT,CAAhB;;AAGA,MAAMM,SAAS,UAAUC,IAAV,CAAgBC,QAAQC,QAAxB,CAAf;AACA,MAAMC,SAAS,OAAOH,IAAP,CAAaC,QAAQC,QAArB,CAAf;;AAEA;;;;;;;;AAQA;AACA,MAAME,WAAWL,SACfJ,QAASM,QAAQI,QAAR,CAAiBC,KAAjB,CAAuB,mBAAvB,EAA4C,CAA5C,CAAT,CADe,GAC6CX,QAASM,QAAQI,QAAjB,CAD9D;;AAGA,MAAME,WAAW,gBAAjB;AACA,MAAMC,WAAY,GAAED,QAAS,MAA7B;AACA,MAAME,aAAaf,KAAMF,GAAGkB,MAAH,EAAN,EAAmBH,QAAnB,CAAnB;AACA,MAAMI,aAAc,GAAEP,QAAS,MAA/B;AACA,MAAMQ,WAAWlB,KAAMmB,GAAGC,GAAH,CAAOC,QAAb,EAAuBP,QAAvB,CAAjB;;AAEA,SAASQ,aAAT,CAAwBC,IAAxB,EACA;AACE,SAASlB,SAAU,GAAEkB,IAAK,MAAjB,GAAyBA,IAAlC;AACD;;AAGD,MAAMC,iBAAmBf,SAAS,KAAT,GAAmBJ,SAAS,KAAT,GAAiB,OAA7D;AACA,MAAMoB,gBAAgBD,kBAAmBjB,QAAQmB,IAAR,KAAiB,MAAjB,GAA0B,IAA1B,GAAiC,IAApD,CAAtB;;AAGA,SAASC,WAAT,CAAsBC,OAAtB,EAA+B;AAC7B,QAAMC,OAASpB,SAASP,OAAT,GAAoBG,SAASD,OAAT,GAAmBD,SAAtD;AACA,SAAO,IAAI0B,IAAJ,CAAUD,OAAV,CAAP;AACD;;AAEDE,QAAQN,cAAR,GAAyBA,cAAzB;AACAM,QAAQL,aAAR,GAAwBA,aAAxB;AACAK,QAAQR,aAAR,GAAwBA,aAAxB;AACAQ,QAAQpB,QAAR,GAAmBA,QAAnB;AACAoB,QAAQf,UAAR,GAAqBA,UAArB;AACAe,QAAQb,UAAR,GAAqBA,UAArB;AACAa,QAAQzB,MAAR,GAAiBA,MAAjB;AACAyB,QAAQH,WAAR,GAAsBA,WAAtB;AACAG,QAAQZ,QAAR,GAAmBA,QAAnB","file":"env.js","sourcesContent":["const os = require( \"os\" );\r\nconst { join, dirname } = require( \"path\" );\r\n\r\nconst SwapWin = require( \"./Swap/Win\" );\r\nconst SwapLinux = require( \"./Swap/Linux\" );\r\nconst SwapMac = require( \"./Swap/Mac\" );\r\n\r\n\r\nconst IS_OSX = /^darwin/.test( process.platform );\r\nconst IS_WIN = /^win/.test( process.platform );\r\n\r\n/**\r\n * ~/project/project_name\r\n * EXEC_DIR = ~/project/\r\n * EXECUTABLE = project_name\r\n * BACKUP_DIR = ~/project.bak/*.*\r\n * UPDATE_DIR = /tmp/nw-autoupdate/*.*\r\n */\r\n\r\n// Directory where the app executable resides\r\nconst EXEC_DIR = IS_OSX ?\r\n  dirname( process.execPath.match(/^([^\\0]+?\\.app)\\//)[1] ) : dirname( process.execPath );\r\n\r\nconst PKG_NAME = \"nw-autoupdater\";\r\nconst LOG_FILE = `${PKG_NAME}.log`;\r\nconst UPDATE_DIR = join( os.tmpdir(), PKG_NAME );\r\nconst BACKUP_DIR = `${EXEC_DIR}.bak`;\r\nconst LOG_PATH = join( nw.App.dataPath, LOG_FILE );\r\n\r\nfunction getExecutable( name )\r\n{\r\n  return ( IS_OSX ? `${name}.app` : name );\r\n}\r\n\r\n\r\nconst PLATFORM_SHORT = ( IS_WIN ? \"win\" : ( IS_OSX ? \"mac\" : \"linux\" ) );\r\nconst PLATFORM_FULL = PLATFORM_SHORT + ( process.arch === \"ia32\" ? \"32\" : \"64\" );\r\n\r\n\r\nfunction swapFactory( options ){\r\n  const Swap = ( IS_WIN ? SwapWin: ( IS_OSX ? SwapMac : SwapLinux ) );\r\n  return new Swap( options );\r\n}\r\n\r\nexports.PLATFORM_SHORT = PLATFORM_SHORT;\r\nexports.PLATFORM_FULL = PLATFORM_FULL;\r\nexports.getExecutable = getExecutable;\r\nexports.EXEC_DIR = EXEC_DIR;\r\nexports.UPDATE_DIR = UPDATE_DIR;\r\nexports.BACKUP_DIR = BACKUP_DIR;\r\nexports.IS_OSX = IS_OSX;\r\nexports.swapFactory = swapFactory;\r\nexports.LOG_PATH = LOG_PATH;\r\n"]}