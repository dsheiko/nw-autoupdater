{"version":3,"sources":["../../Lib/request.js"],"names":["uri","res","request","Promise","resolve","reject","contentType","headers","rawData","test","Error","setEncoding","on","chunk","JSON","parse","e","readJson","srcUri","targetDir","onProgress","filename","getFilename","filepath","join","length","pipe","fs","createWriteStream","download","http","require","https","url","pathname","split","reverse","driver","protocol","get","statusCode","error","resume","message","exports"],"mappings":"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","file":"request.js","sourcesContent":["const http = require( \"http\" ),\r\n      https = require( \"https\" ),\r\n      url = require( \"url\" ),\r\n      fs = require( \"fs\" ),\r\n      { join } = require( \"path\" );\r\n\r\n/**\r\n * Extract file name from a download URI\r\n * @param {string} uri\r\n * @returns {string}\r\n */\r\nfunction getFilename( uri ){\r\n  const [ filename ] = url.parse( uri ).pathname.split( `/` ).reverse();\r\n  return filename;\r\n}\r\n\r\n/**\r\n * Make HTTP request\r\n * @private\r\n * @param {string} uri\r\n * @returns {Promise}\r\n */\r\nfunction request( uri ){\r\n  const driver = url.parse( uri ).protocol === \"https:\" ? https : http;\r\n  return new Promise(( resolve, reject ) => {\r\n   return driver.get( uri, ( res ) => {\r\n      const statusCode = res.statusCode;\r\n      let error = false;\r\n      if ( statusCode !== 200 ) {\r\n        error = new Error( `Request Failed (${uri}).\\n` +\r\n                           `Status Code: ${statusCode}` );\r\n      }\r\n\r\n      if ( error ) {\r\n        // consume response data to free up memory\r\n        res.resume();\r\n        return reject( error );\r\n      }\r\n      return resolve( res );\r\n    }).on( \"error\", ( e ) => {\r\n      reject( new Error( `Cannot read (${uri}).\\n${e.message}` ) );\r\n    });\r\n   });\r\n}\r\n\r\n/**\r\n * Read JSON from a remote host\r\n * @param {string} uri\r\n * @returns {Promise}\r\n */\r\nasync function readJson( uri ){\r\n  const res = await request( uri );\r\n  return new Promise(( resolve, reject ) => {\r\n    contentType = res.headers[ \"content-type\" ];\r\n    let rawData = \"\";\r\n    if ( !/^application\\/json/.test( contentType ) ) {\r\n      return reject( new Error( `Invalid content-type (${uri}).\\n` +\r\n                         `Expected application/json but received ${contentType}`) );\r\n    }\r\n    res.setEncoding( \"utf8\" );\r\n    res.on( \"data\", chunk => {\r\n      // downloaded / total\r\n      return rawData += chunk;\r\n    });\r\n    res.on( \"end\", () => {\r\n      try {\r\n        resolve( JSON.parse( rawData ) );\r\n      } catch ( e ) {\r\n        reject( e );\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Download file\r\n * @param {string} srcUri\r\n * @param {string} targetDir\r\n * @param {function} onProgress\r\n * @returns {Promise}\r\n */\r\nasync function download( srcUri, targetDir, onProgress ){\r\n  const res = await request( srcUri ),\r\n        filename = getFilename( srcUri ),\r\n        filepath = join( targetDir, filename );\r\n  return new Promise(( resolve, reject ) => {\r\n    let length = 0;\r\n    res.on( \"data\", chunk => {\r\n      length += chunk.length;\r\n      onProgress( length );\r\n    });\r\n    res.pipe( fs.createWriteStream( filepath ) );\r\n    res.on( \"end\", () => {\r\n      onProgress( length );\r\n      resolve( filepath );\r\n    });\r\n  });\r\n}\r\n\r\nexports.readJson = readJson;\r\nexports.download = download;"]}